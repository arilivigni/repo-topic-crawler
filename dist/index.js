(()=>{var __webpack_modules__={777:module=>{module.exports=eval("require")("@actions/artifact")},974:module=>{module.exports=eval("require")("@actions/core")},134:module=>{module.exports=eval("require")("@octokit/plugin-retry")},862:module=>{module.exports=eval("require")("@octokit/plugin-throttling")},383:module=>{module.exports=eval("require")("@octokit/rest")},325:module=>{module.exports=eval("require")("js-yaml")},147:e=>{"use strict";e.exports=require("fs")}};var __webpack_module_cache__={};function __nccwpck_require__(e){var t=__webpack_module_cache__[e];if(t!==undefined){return t.exports}var r=__webpack_module_cache__[e]={exports:{}};var o=true;try{__webpack_modules__[e](r,r.exports,__nccwpck_require__);o=false}finally{if(o)delete __webpack_module_cache__[e]}return r.exports}if(typeof __nccwpck_require__!=="undefined")__nccwpck_require__.ab=__dirname+"/";var __webpack_exports__={};(()=>{const e=__nccwpck_require__(974);const t=__nccwpck_require__(777);const r=__nccwpck_require__(147);const o=__nccwpck_require__(325);const{Octokit:i}=__nccwpck_require__(383);const{retry:n}=__nccwpck_require__(134);const{throttling:_}=__nccwpck_require__(862);const a=i.plugin(n,_);async function newClient(e){return new a({auth:e,retries:10,throttle:{onRateLimit:(e,t,r)=>{r.log.warn(`Request quota exhausted for request ${t.method} ${t.url}`);if(t.request.retryCount===0){r.log.info(`Retrying after ${e} seconds!`);return true}},onSecondaryRateLimit:(e,t,r)=>{r.log.warn(`Abuse detected for request ${t.method} ${t.url}`);if(t.request.retryCount===0){r.log.info(`Retrying after ${e} seconds!`);return true}}}})}async function main(){const i=e.getInput("admin_token",{required:true,trimWhitespace:true});const n=e.getInput("org",{required:true,trimWhitespace:true});const _=e.getInput("repo_topic",{required:true,trimWhitespace:true});const a=e.getInput("repo_file",{required:true,trimWhitespace:true});const u=[];let c=false;const s=await newClient(i);const p=t.create();const l=await s.paginate("GET /orgs/{org}/repos",{org:n,per_page:100});const d=l.filter((e=>e.topics.includes(_)));for(const t of d){try{const{data:r}=await s.request("GET /repos/{owner}/{repo}/contents/{path}",{owner:t.owner.login,repo:t.name,path:a});e.info(`Found ${a} in repository ${t.name} with topic ${_}}`);u.push(t.name,o.load(Buffer.from(r.content,"base64").toString()))}catch(r){e.debug(`Did NOT find ${a} in repository ${t.name} with topic ${_}}`);c=true;e.error(`Error: ${r}`)}}e.info(`There were ${u.length} repositories with topic ${_} and containing file ${a}}`);r.writeFileSync("data.json",JSON.stringify({[_]:u},null,2));await p.uploadArtifact(_,["data.json"],".",{continueOnError:false,retentionDays:90});if(c){e.setFailed("Some repositories failed to be collected")}}main().catch((t=>{e.setFailed(t.message)}))})();module.exports=__webpack_exports__})();